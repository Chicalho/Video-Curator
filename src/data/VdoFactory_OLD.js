import {Record} from "immutable";

var VdoFactory = {};

var VDO = Record({
    id:0,                       //unique id, based on base64 encode of file.webkitRelativePath ( use atob() to decode)
    filePath:"/",               //relative url of video, uses file.webkitRelativePath
    fileUrl:"/",                //blob url, generated by using URL.createObjectURL(file)
    fileName:"Untitled.mp4",    //name of file, uses file.name
    fileSize:0,                 //size of file, uses file.size
    name:"Untitled",            //name of video, manually set
    type:"None",                //types: None, Movie, Scene, Clip
    movieId:"Untitled",         //movie id (to group scenes of the same movie)
    studios:["Untagged"],	    //studio name
    series:["Untagged"],	    //series name
    actors:["Untagged"],	    //actor tags
    tags:["Untagged"],		    //other tags
    watched:0,				    //number of times watched
    lastWatched:0,			    //date in milisec last time hit play
    dateCreated:0,			    //date in milisec when added to database
    rating:0,				    //rating, 1 thumbs down, 3 thumbs up, 2 neutral
    stills:[],				    //array with urls of still photo screenshots
    noFile: false,              //marks VDO to remove (no matching file in operating system)
    conflict: null              // marks file for conflict (vdo was not updated, several vdos point to same file based on size alone)
});

VdoFactory.createVideoDefinitionObject = function(file){

    var videoDefinitionObject = new VDO({
        id:             btoa(file.webkitRelativePath),
		// fileUrl:        URL.createObjectURL(file),
		filePath:       file.webkitRelativePath,
		fileName:       file.name,
        fileSize:       file.size,
        dateCreated:    new Date()
    });
    
	// console.log("New VideoDefinitionObject created for id", videoDefinitionObject.get("id") );
    // console.log("(", videoDefinitionObject, ")");
    
	return videoDefinitionObject;
}

export default VdoFactory;